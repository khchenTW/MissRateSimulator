import matplotlib
matplotlib.use('Agg')
import matplotlib.patches as mpatches
import random
import math
import numpy as np
import matplotlib.pyplot as plt
import itertools
from matplotlib import rcParams
from matplotlib.backends.backend_pdf import PdfPages




#fileName = 'diffrent_set_size'
fileName = '10tasks_u70'
folder = 'final_plot/'
perfault = []

# plot in pdf
pp = PdfPages(folder + fileName + '.pdf')

percentageU = 70
#title = 'Tasks: '+ repr(10) + ', Utilization:'+repr(percentageU)+'%'
title = 'Tasks: '+ repr(10) + ', $U^N_{SUM}$:'+repr(percentageU)+'%'

faultRate = [10**-2., 10**-4, 10**-6.]

rate106 = [0.0194464488950884,0.0102367525759464,0.306608803896458,0.644507623489113,0.543028085930093,0.205608462155688,0.00790792717149143,0.0202329511416378,0.303009478626272,0.0155300218615692,2.61130507944574e-6,0.275811567252816,8.68082012303402e-7,4.51132807238594e-11,0.0684708936866193,2.20892553667075e-5,0.697327005936275,0.0226393267858495,0.0958778774606864,0.000539493824449932,1.75325605033960e-9,8.01874256681799e-6,0.0972667804161613,0.0142437713042175,8.50586010466436e-6,0.00181780676697442,0.138883532603375,0.170910616731871,0.0349157044067170,0.218623783882268,0.186068938148785,1.10329014692363e-6,1.46956148882346e-5,0.00604584513501148,0.176294444755025,4.63632430808001e-5,0.0328297043053155,0.0229095254198549,0.392001042038505,0.00304371682895850,0.0229973092532955,0.481873474802062,0.00249078309352665,1.89640988928726e-5,0.0153846536641783,0.134012255140579,0.0944518604257178,9.55038719094344e-6,0.394038912389351,0.0324585028341855,]
rate107 = [3.25265809340174e-6,2.29075846208746e-6,0.000673720528481509,4.49304191700987e-5,1.87915283291981e-12,1.07223454488841e-12,2.23726883951574e-5,4.74117028646793e-8,4.63202150275528e-12,4.49071216306916e-9,2.17587114220819e-9,4.80508131798508e-12,2.33935554623220e-6,8.76193560196428e-8,2.41520782584882e-7,0.000443710318052445,5.57354452063659e-8,5.24147466050939e-9,3.90785345280605e-11,0.00112652300190596,1.39802640430934e-11,2.19478632569018e-6,5.56297392802744e-5,0.000250887510193308,3.95466363238765e-7,0.000458857962770012,1.29369904805934e-6,3.26562588517604e-12,0.00171905252148391,1.02410124561636e-5,0.000108085032611390,9.71051331383177e-8,1.33919541118768e-7,1.76755140271620e-7,1.32035776296391e-5,0.0906188887602601,8.28462495339947e-9,6.83037328178596e-10,1.82356543467745e-9,1.22685890182627e-5,3.60702869094119e-8,1.53649275219745e-12,1.38476937916051e-5,0.000643159777840219,0.000109899791376021,7.62919894016164e-13,3.00924235281920e-6,0.00222180993429723,0.00302886672563025,5.60405106957268e-9,]
rate108 = [1.74795337871479e-10,6.96903033457140e-6,9.74906294815309e-8,4.46234483866513e-8,1.27814106819892e-13,7.41127592750049e-7,0.00148646095423255,1.07343630082393e-9,6.30086140870172e-8,1.04186574765827e-7,1.22326077851283e-12,1.47126960943032e-11,2.66294622774463e-8,0.000221235125583756,1.05115701617509e-8,1.83485749803560e-8,1.87419094440341e-9,2.16522774193663e-10,2.57022793607307e-12,7.25244146839695e-9,0.000199658389825743,4.31121625767427e-10,1.90168075556824e-5,0.000888547536353108,1.53644890035395e-6,1.60497667812371e-5,1.15625140833175e-12,0.000110676126667054,8.77143395021439e-10,1.37751152306032e-9,1.65181658607944e-14,9.73584088502266e-9,1.91633988913580e-10,3.18239573127167e-10,4.44849235782533e-8,8.84407140477312e-12,9.54900857191003e-15,3.14893845435431e-13,3.64190018936297e-13,2.31012485639247e-10,0.000195319419067763,1.05842556819029e-9,0.000165088854158210,3.00094803409282e-6,1.12156443733144e-6,2.90804763555570e-10,2.57925406211824e-13,5.46426863651084e-8,2.00856136260269e-5,8.60064401121885e-10,]
frate106 = []
frate107 = []
frate108 = []
for x in rate106:
    if x != 0:
        frate106.append(x)
for x in rate107:
    if x != 0:
        frate107.append(x)
for x in rate108:
    if x != 0:
        frate108.append(x)

perfault.append(frate106)
perfault.append(frate107)
perfault.append(frate108)

'''
lower_error=[]
upper_error=[]
median = []

for i in range(4):
    median.append(np.median(perfault[i]))
    lower_error.append(min(perfault[i]))
    upper_error.append(max(perfault[i]))
asymmetric_error = (lower_error, upper_error)
print asymmetric_error
'''
#the blue box
boxprops = dict(linewidth=2, color='blue')
#the median line
medianprops = dict(linewidth=2.5, color='red')
whiskerprops = dict(linewidth=2.5, color='black')
capprops = dict(linewidth=2.5)
plt.title(title, fontsize=20)
plt.grid(True)
plt.ylabel('Expected Miss Rate', fontsize=20)
plt.xlabel('Fault Rate', fontsize=22)
ax = plt.subplot()
ax.set_yscale("log")
ax.set_ylim([10**-21,10**0])
ax.tick_params(axis='both', which='major',labelsize=20)
labels = ('$10^{-2}$','$10^{-4}$', '$10^{-6}$')
try:
    ax.boxplot(perfault, 0, '', labels=labels, boxprops=boxprops, whiskerprops=whiskerprops, capprops=capprops)
except ValueError:
    print "ValueError"
figure = plt.gcf()
figure.set_size_inches([10,6.5])

box = mpatches.Patch(color='blue', label='First to Third Quartiles', linewidth=3)
av = mpatches.Patch(color='red', label='Median', linewidth=3)
whisk = mpatches.Patch(color='black', label='Whiskers', linewidth=3)

plt.legend(handles=[av, box, whisk], fontsize=12, frameon=True, loc=4)


pp.savefig()
plt.clf()
pp.close()

